name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  lint:
    name: 린트 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: UV 설치
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 의존성 설치
        run: |
          uv sync
          source .venv/bin/activate

      - name: pre-commit 실행
        run: |
          source .venv/bin/activate
          pre-commit install
          pre-commit run --all-files

      - name: Black 코드 포맷터 검사
        run: |
          source .venv/bin/activate
          black --check .

      - name: isort import 정렬 검사
        run: |
          source .venv/bin/activate
          isort --check-only .

      - name: flake8 린트 검사
        run: |
          source .venv/bin/activate
          flake8 .

      - name: mypy 타입 검사
        run: |
          source .venv/bin/activate
          mypy .

  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: UV 설치
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 의존성 설치
        run: |
          uv sync
          source .venv/bin/activate

      - name: bandit 보안 검사
        run: |
          source .venv/bin/activate
          bandit -r . -x tests,migrations

      - name: safety 취약점 검사
        run: |
          source .venv/bin/activate
          safety check

  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    needs: [lint, security]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: UV 설치
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 의존성 설치
        run: |
          uv sync
          source .venv/bin/activate

      - name: Django 테스트 실행
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: false
        run: |
          source .venv/bin/activate
          python manage.py test --verbosity=2

      - name: 테스트 커버리지 측정
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: false
        run: |
          source .venv/bin/activate
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: 커버리지 결과 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  frontend:
    name: 프론트엔드 빌드
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: theme/static_src/package-lock.json

      - name: 의존성 설치
        run: |
          cd theme/static_src
          npm ci

      - name: CSS 빌드
        run: |
          cd theme/static_src
          npm run build
